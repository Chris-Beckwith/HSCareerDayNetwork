name: Back up database
run-name: Task
on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      PGUSER: postgres
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGDATABASE: careerday
      PGHOST: localhost
      PGPORT: 5555

    steps:
      - name: Set up Flyctl
        run: |
          curl -sL https://fly.io/install.sh | sh
          echo "${{ github.workspace }}/.fly/bin" >> $GITHUB_PATH
      - name: Set filename
        run: echo "filename=db-$(date -u +"%Y-%m-%d-%H%M%S").dump" >> $GITHUB_ENV

      - name: Dump database
        run: |
          flyctl proxy 5555:5432 -a careerday-db-restored &
          sleep 3
          echo Dumping ...
          pg_dump -Fc -f ${{ env.filename }}
          ls

      - name: Create Release
        id: create_release
        run: |
          RELEASE_NAME="Backup $(date -u +"%Y-%m-%d %H:%M:%S")"
          echo "Creating release..."
          RESPONSE=$(curl -s -X POST https://api.github.com/repos/${{ github.repository }}/releases -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\": \"backup-$(date -u +'%Y-%m-%d-%H%M%S')\", \"name\": \"$RELEASE_NAME\", \"body\": \"Database backup created.\"}")
          echo "Release created: $RESPONSE"
          echo "::set-output name=upload_url::$(echo $RESPONSE | jq -r .upload_url | sed "s/{?name,label}//")"

      - name: Upload to Release
        run: |
          echo "Uploading backup to release..."
          curl -s -X POST "${{ steps.create_release.outputs.upload_url }}?name=${{ env.filename }}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/octet-stream" --data-binary @$filename
